name: Lint and Test

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    lint-js:
        name: JS Lints
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Lint JS
              run: npm run lint:js

            - name: Lint CSS
              run: npm run lint:css

    syntax-errors:
        name: Syntax errors
        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - '7.0'
                    - '7.1'
                    - '7.2'
                    - '7.3'
                    - '7.4'
                    - '8.0'
                    - '8.1'
                    - '8.2'
                    - '8.3'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  coverage: none
                  tools: parallel-lint

            - name: Search for invalid complex curly syntax
              run: |
                  ! git grep -e '\${[A-Z_a-z]' -- '*.php'

            - name: Check source code for syntax errors
              run: |
                  composer exec --no-interaction -- parallel-lint *.php inc/ tests/

    lint-php:
        name: PHP Lints
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 'latest'
                  coverage: none
                  tools: composer, cs2pr

            - name: Validate composer.json
              run: composer validate --no-check-all --strict

            - name: Install PHP dependencies
              uses: ramsey/composer-install@v2
              with:
                  composer-options: '--prefer-dist --no-scripts'

            - name: Lint PHP
              run: composer run lint

    phpstan:
        name: PHPStan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 'latest'
                  coverage: none
                  tools: composer, cs2pr

            - name: Install PHP dependencies
              uses: ramsey/composer-install@v2
              with:
                  composer-options: '--prefer-dist'

            - name: Run PHPStan
              run: composer run phpstan

    unit-js:
        name: JS Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm run test:unit -- --collectCoverage --coverageDirectory=build

            - name: Upload code coverage report
              uses: codecov/codecov-action@v4.1.0
              with:
                  file: build/lcov.info
                  flags: js
                  token: ${{ secrets.CODECOV_TOKEN }}

    unit-php:
        name: 'PHP ${{ matrix.php }} - WP ${{ matrix.wp }}'
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mariadb:lts
                env:
                    MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: true
                    MARIADB_DATABASE: wordpress_test
                    MARIADB_MYSQL_LOCALHOST_USER: 1
                    MARIADB_MYSQL_LOCALHOST_GRANTS: USAGE
                ports:
                    - 3306
                options: --health-cmd="healthcheck.sh --su-mysql --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            matrix:
                php: ['8.1', '8.0', '7.0', '7.4']
                wp: ['latest']
                coverage: [false]
                experimental: [false]
                include:
                    - php: '8.2'
                      wp: 'latest'
                      coverage: true
                      experimental: false

                    - php: '8.2'
                      wp: 'trunk'
                      experimental: true

                    - php: '7.4'
                      wp: '6.2'
                      experimental: false

                    - php: '8.3'
                      wp: 'trunk'
                      experimental: true

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: mysql
                  coverage: xdebug
                  tools: composer, cs2pr

            - name: Shutdown default MySQL service
              run: sudo service mysql stop

            - name: Verify MariaDB connection
              run: |
                  while ! mysqladmin ping -h"127.0.0.1" -P"${{ job.services.mysql.ports[3306] }}" --silent; do
                    sleep 1
                  done

            - name: Set up tests
              run: bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1:${{ job.services.mysql.ports['3306'] }} ${{ matrix.wp }} true

            - name: Install PHP dependencies
              uses: ramsey/composer-install@v2
              with:
                  composer-options: '--prefer-dist --no-scripts'

            # Installs a different PHPUnit version depending on the WP/PHP version combo we're testing against.
            #
            # | WP  / PHP | PHPUnit |
            # |-----------|---------|
            # | *   / 7.0 | 6       |
            # | *   / 7.4 | 9       |
            # | *   / 8   | 9       |
            #
            # See https://make.wordpress.org/core/handbook/references/phpunit-compatibility-and-wordpress-versions/
            - name: Update PHPUnit
              run: |
                  if [[ $PHP_VERSION == "7.4" || $PHP_VERSION == "8.0" || $PHP_VERSION == "8.1" || $PHP_VERSION == "8.2" || $PHP_VERSION == "8.3" ]]; then
                    echo "Installing latest version of PHPUnit"
                    composer update --ignore-platform-reqs --no-interaction --no-scripts yoast/phpunit-polyfills --with-dependencies
                  fi
              env:
                  WP_VERSION: ${{ matrix.wp }}
                  PHP_VERSION: ${{ matrix.php }}

            - name: Run tests
              run: |
                  composer test
                  composer test:multisite
              if: ${{ ! matrix.coverage }}

            - name: Run tests with coverage
              run: |
                  composer test -- --coverage-clover coverage.xml
                  composer test:multisite -- --coverage-clover coverage-multisite.xml
              if: ${{ matrix.coverage }}

            - name: Upload code coverage report
              uses: codecov/codecov-action@v4.1.0
              with:
                  file: coverage.xml
                  flags: default
                  token: ${{ secrets.CODECOV_TOKEN }}
              if: ${{ matrix.coverage }}

            - name: Upload code coverage report
              uses: codecov/codecov-action@v4.1.0
              with:
                  file: coverage-multisite.xml
                  flags: multisite
                  token: ${{ secrets.CODECOV_TOKEN }}
              if: ${{ matrix.coverage }}
